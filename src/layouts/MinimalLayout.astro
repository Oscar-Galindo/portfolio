---
export interface Props {
  title?: string;
  description?: string;
}

const {
  title = 'Oscar Galindo - Full Stack Developer',
  description = 'Senior Full Stack Developer specializing in modern web technologies and enterprise solutions.',
} = Astro.props;
---

<!doctype html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  <meta name="generator" content={Astro.generator} />

  <title>{title}</title>
  <meta name="description" content={description} />

  <!-- Preconnect -->
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://res.cloudinary.com" />

  <!-- Open Graph -->
  <meta property="og:type" content="website" />
  <meta property="og:title" content={title} />
  <meta property="og:description" content={description} />
</head>
<body>
  <div class="noise"></div>
  <nav class="nav">
    <div class="nav-container">
      <a href="/" class="logo">Oscar Galindo</a>
      <div class="nav-links">
        <a href="/#projects" class="nav-link">Projects</a>
        <a href="mailto:oscar@oscargalindo.dev" class="nav-link">Get in touch</a>
      </div>
    </div>
  </nav>

  <main>
    <slot />
  </main>

  <style>
    :root {
      --bg: #0a0a0a;
      --text: #ffffff;
      --text-muted: #a1a1aa;
      --border: #27272a;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    html {
      scroll-behavior: smooth;
      font-family: 'Inter', system-ui, sans-serif;
    }

    body {
      background: var(--bg);
      color: var(--text);
      font-size: 16px;
      line-height: 1.6;
      min-height: 100vh;
      overflow-x: hidden;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }

    .noise {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
      opacity: 0.02;
      z-index: 1;
      background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 256 256' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.65' numOctaves='3' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)'/%3E%3C/svg%3E");
    }

    .nav {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      z-index: 100;
      padding: 2rem 0;
      background: linear-gradient(to bottom, rgba(10, 10, 10, 0.8) 0%, transparent 100%);
      backdrop-filter: blur(10px);
      -webkit-backdrop-filter: blur(10px);
    }

    .nav-container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 0 2rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .logo {
      font-size: 1.125rem;
      font-weight: 500;
      color: var(--text);
      text-decoration: none;
      letter-spacing: -0.02em;
    }

    .nav-links {
      display: flex;
      gap: 3rem;
      align-items: center;
    }

    .nav-link {
      color: var(--text);
      text-decoration: none;
      font-size: 0.95rem;
      font-weight: 400;
      transition: all 0.3s ease;
      position: relative;
      padding: 0.5rem 1rem;
      border-radius: 25px;
    }

    .nav-link:hover {
      opacity: 0.9;
      background: rgba(255, 255, 255, 0.1);
    }

    .nav-link:last-child {
      border: 1px solid rgba(255, 255, 255, 0.2);
      padding: 0.5rem 1.5rem;
    }

    .nav-link:last-child:hover {
      border-color: rgba(255, 255, 255, 0.4);
      background: rgba(255, 255, 255, 0.05);
    }

    main {
      position: relative;
      z-index: 2;
    }

    @media (max-width: 768px) {
      .nav-links {
        gap: 1.5rem;
      }

      .nav-link {
        font-size: 0.875rem;
      }
    }
  </style>

  <script>
    import Lenis from 'lenis';

    const lenis = new Lenis({
      duration: 1.2,
      easing: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)),
      smoothWheel: true,
    });

    function raf(time: number) {
      lenis.raf(time);
      requestAnimationFrame(raf);
    }
    requestAnimationFrame(raf);
  </script>
</body>
</html>